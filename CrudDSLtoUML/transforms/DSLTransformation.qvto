modeltype CrudDSL uses "http://www.xtext.org/example/mydsl/MyDsl01";
modeltype umlMM "strict" uses "http://www.eclipse.org/uml2/4.0.0/UML";

transformation CrudDSLToUML(in DSL: CrudDSL, out UML: umlMM);

main() {
	DSL.rootObjects()[Model] -> map toModel();
}

mapping Model::toModel(): umlMM::Model{
	
	packagedElement += self.entities.map toClass();
}

mapping Entity::toClass(): umlMM::Class{


	name = self.name;
	isAbstract := self._abstract;
	
	if(self.superType != null)then {
		superClass := self.superType.late resolveone(umlMM::Class);
	}
	endif;
	
	ownedAttribute += self.properties.map toUmlProperty();
}

mapping AttributeType::toPrimitiveType() : PrimitiveType {
	name := switch
	{
		case (AttributeType::String = self) "MyString";
		case (AttributeType::Integer = self) "MyInteger";
		case (AttributeType::Date = self) "MyDate";
	};
}

mapping CrudDSL::Property::toUmlProperty(): umlMM::Property{
init{
	var isAttribute := self.oclIsTypeOf(Attribute);
	var crudDSLReference := self.oclAsType(Reference);
	var crudDSLAttribute := self.oclAsType(Attribute);
	var ownedAssociation := crudDSLReference -> map toUmlAssociation();
} 
	name := self.name;
	
	if(isAttribute = true) then {
		if(crudDSLAttribute.optional = true) then 
		{
			lower := 0;
		}
		else
		{
			 lower := 1;
		}
		endif;
		
		upper := 1;
		
		type := crudDSLAttribute.type.map toPrimitiveType();
	}
	else
	{
		
		association := ownedAssociation.resolveone(Association);
					
		lower := 1;
		if(crudDSLReference.multiplicity = "[1]") then
		{
			upper := 1;
		}
		else
		{
			upper := *;
		}
		endif;
	}
	endif;
}

mapping CrudDSL::Reference::toUmlAssociation(): umlMM::Association{
	
	name := self.name + "_" + self.opposite.name;
	result.memberEnd := self.resolveone(umlMM::Property); 
	result.memberEnd += self.opposite.resolveone(umlMM::Property);
}







