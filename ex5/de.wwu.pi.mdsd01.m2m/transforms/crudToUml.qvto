modeltype CrudDsl uses "http://www.wwu.de/pi/mdsd/crudDsl/CrudDsl";
modeltype umlMM "strict" uses "http://www.eclipse.org/uml2/4.0.0/UML";

transformation CrudToUML(in DSL: CrudDsl, out UML: umlMM);

main() {
	DSL.rootObjects()[Entity] -> map toClass();
}

mapping Entity::toClass(): umlMM::Class
{

	name = self.name;
	isAbstract := self._abstract;
	
	superClass := self.superType.resolveone(Class);

	ownedAttribute += self.properties.map toUmlProperty();
}



mapping AttributeType::toPrimitiveType() : PrimitiveType {
	name := switch
	{
		case (AttributeType::String = self) "MyString";
		case (AttributeType::Integer = self) "MyInteger";
		case (AttributeType::Date = self) "MyDate";
	};
}

mapping CrudDsl::Property::toUmlProperty(): umlMM::Property{
init{
	var isAttribute := self.oclIsTypeOf(Attribute);
	var crudDslReference := self.oclAsType(Reference);
	var crudDslAttribute := self.oclAsType(Attribute);
} 
	name := self.name;
	
	
	if(isAttribute = true) then {
		if(crudDslAttribute.optional = true) then 
		{
			lower := 0;
		}
		else
		{
			 lower := 1;
		}
		endif;
		
		upper := 1;
		type := crudDslAttribute.type.map toPrimitiveType();
	}
	else
	{
		//Association := crudDslReference -> map toUmlAssociation();
		
		lower := 1;
		if(crudDslReference.multiplicity = "[1]") then
		{
			upper := 1;
		}
		else
		{
			upper := *;
		}
		endif;
	}
	endif;
}

mapping CrudDsl::Reference::toUmlAssociation(): umlMM::Association{
	
	
}






