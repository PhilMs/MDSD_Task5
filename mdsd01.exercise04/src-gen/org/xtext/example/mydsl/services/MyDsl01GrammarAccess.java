/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDsl01GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cWindowsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWindowsWindowParserRuleCall_1_0 = (RuleCall)cWindowsAssignment_1.eContents().get(0);
		
		//// Task 1
		//Model:
		//	entities+=Entity* windows+=Window*;
		public ParserRule getRule() { return rule; }

		//entities+=Entity* windows+=Window*
		public Group getGroup() { return cGroup; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }

		//windows+=Window*
		public Assignment getWindowsAssignment_1() { return cWindowsAssignment_1; }

		//Window
		public RuleCall getWindowsWindowParserRuleCall_1_0() { return cWindowsWindowParserRuleCall_1_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_3_1_0 = (CrossReference)cSuperTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_3_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPropertiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertiesPropertyParserRuleCall_5_0 = (RuleCall)cPropertiesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////	
		////Entity:
		////	"entity" name=QualifiedName ("extends" superEntity=[Entity])? (abstract="abstract")?
		////	"{"
		////	(properties+=Property)*
		////	"}"
		////;
		////
		////Property:
		////	Attribute | Reference
		////;
		////
		////enum AttributeType :
		////	String='String' |
		////	Integer='Integer' |
		////	Date='Date'
		////;
		////
		////Attribute:
		////	"att" name=ID type=AttributeType (optional="optional")?
		////;
		////
		////enum Cardinality :
		////	One='1' |
		////	Multi='*'
		////;
		////
		////Reference:
		////	"ref" name=ID entity=[Entity] (cardinality=Cardinality)?
		////;
		//// =============================================
		/// * Entity Model * / // =============================================
		//Entity:
		//	abstract?="abstract"? "entity" name=ID ("extends" superType=[Entity])? "{" properties+=Property* "}";
		public ParserRule getRule() { return rule; }

		//abstract?="abstract"? "entity" name=ID ("extends" superType=[Entity])? "{" properties+=Property* "}"
		public Group getGroup() { return cGroup; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("extends" superType=[Entity])?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superType=[Entity]
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }

		//[Entity]
		public CrossReference getSuperTypeEntityCrossReference_3_1_0() { return cSuperTypeEntityCrossReference_3_1_0; }

		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_3_1_0_1() { return cSuperTypeEntityIDTerminalRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_5() { return cPropertiesAssignment_5; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_5_0() { return cPropertiesPropertyParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	Attribute | Reference;
		public ParserRule getRule() { return rule; }

		//Attribute | Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//Attribute
		public RuleCall getAttributeParserRuleCall_0() { return cAttributeParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeAttributeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cOptionalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cOptionalOptionalKeyword_4_0 = (Keyword)cOptionalAssignment_4.eContents().get(0);
		
		//Attribute:
		//	"att" name=ID ":" type=AttributeType optional?="optional"?;
		public ParserRule getRule() { return rule; }

		//"att" name=ID ":" type=AttributeType optional?="optional"?
		public Group getGroup() { return cGroup; }

		//"att"
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=AttributeType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//AttributeType
		public RuleCall getTypeAttributeTypeEnumRuleCall_3_0() { return cTypeAttributeTypeEnumRuleCall_3_0; }

		//optional?="optional"?
		public Assignment getOptionalAssignment_4() { return cOptionalAssignment_4; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_4_0() { return cOptionalOptionalKeyword_4_0; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEntityCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeEntityCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityMultiplicityKindEnumRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOppositeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOppositeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOppositeReferenceCrossReference_5_1_0 = (CrossReference)cOppositeAssignment_5_1.eContents().get(0);
		private final RuleCall cOppositeReferenceIDTerminalRuleCall_5_1_0_1 = (RuleCall)cOppositeReferenceCrossReference_5_1_0.eContents().get(1);
		
		//Reference:
		//	"ref" name=ID ":" type=[Entity] multiplicity=MultiplicityKind? ("opposite=" opposite=[Reference]);
		public ParserRule getRule() { return rule; }

		//"ref" name=ID ":" type=[Entity] multiplicity=MultiplicityKind? ("opposite=" opposite=[Reference])
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[Entity]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[Entity]
		public CrossReference getTypeEntityCrossReference_3_0() { return cTypeEntityCrossReference_3_0; }

		//ID
		public RuleCall getTypeEntityIDTerminalRuleCall_3_0_1() { return cTypeEntityIDTerminalRuleCall_3_0_1; }

		//multiplicity=MultiplicityKind?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }

		//MultiplicityKind
		public RuleCall getMultiplicityMultiplicityKindEnumRuleCall_4_0() { return cMultiplicityMultiplicityKindEnumRuleCall_4_0; }

		//"opposite=" opposite=[Reference]
		public Group getGroup_5() { return cGroup_5; }

		//"opposite="
		public Keyword getOppositeKeyword_5_0() { return cOppositeKeyword_5_0; }

		//opposite=[Reference]
		public Assignment getOppositeAssignment_5_1() { return cOppositeAssignment_5_1; }

		//[Reference]
		public CrossReference getOppositeReferenceCrossReference_5_1_0() { return cOppositeReferenceCrossReference_5_1_0; }

		//ID
		public RuleCall getOppositeReferenceIDTerminalRuleCall_5_1_0_1() { return cOppositeReferenceIDTerminalRuleCall_5_1_0_1; }
	}

	public class WindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Window");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntryWindowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListWindowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// =============================================
		/// * GUI Model * / // =============================================
		//Window:
		//	EntryWindow | ListWindow;
		public ParserRule getRule() { return rule; }

		//EntryWindow | ListWindow
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntryWindow
		public RuleCall getEntryWindowParserRuleCall_0() { return cEntryWindowParserRuleCall_0; }

		//ListWindow
		public RuleCall getListWindowParserRuleCall_1() { return cListWindowParserRuleCall_1; }
	}

	public class ListWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListWindowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTitleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTitleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cTitleAssignment_4_1.eContents().get(0);
		private final Assignment cSizeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSizeSizeParserRuleCall_5_0 = (RuleCall)cSizeAssignment_5.eContents().get(0);
		
		//ListWindow:
		//	"ListWindow" name=ID "for" entity=[Entity] ("title" title=STRING)? size=Size;
		public ParserRule getRule() { return rule; }

		//"ListWindow" name=ID "for" entity=[Entity] ("title" title=STRING)? size=Size
		public Group getGroup() { return cGroup; }

		//"ListWindow"
		public Keyword getListWindowKeyword_0() { return cListWindowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//entity=[Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }

		//("title" title=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"title"
		public Keyword getTitleKeyword_4_0() { return cTitleKeyword_4_0; }

		//title=STRING
		public Assignment getTitleAssignment_4_1() { return cTitleAssignment_4_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_4_1_0() { return cTitleSTRINGTerminalRuleCall_4_1_0; }

		//size=Size
		public Assignment getSizeAssignment_5() { return cSizeAssignment_5; }

		//Size
		public RuleCall getSizeSizeParserRuleCall_5_0() { return cSizeSizeParserRuleCall_5_0; }
	}

	public class EntryWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntryWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntryWindowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cUnorderedGroup_4.eContents().get(0);
		private final Keyword cTitleKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cTitleAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_4_0_1_0 = (RuleCall)cTitleAssignment_4_0_1.eContents().get(0);
		private final Assignment cSizeAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cSizeSizeParserRuleCall_4_1_0 = (RuleCall)cSizeAssignment_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsUIElementParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EntryWindow:
		//	"EntryWindow" name=ID "for" entity=[Entity] (("title" title=STRING)? & size=Size) "{" elements+=UIElement* "}";
		public ParserRule getRule() { return rule; }

		//"EntryWindow" name=ID "for" entity=[Entity] (("title" title=STRING)? & size=Size) "{" elements+=UIElement* "}"
		public Group getGroup() { return cGroup; }

		//"EntryWindow"
		public Keyword getEntryWindowKeyword_0() { return cEntryWindowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//entity=[Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }

		//[Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }

		//("title" title=STRING)? & size=Size
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//("title" title=STRING)?
		public Group getGroup_4_0() { return cGroup_4_0; }

		//"title"
		public Keyword getTitleKeyword_4_0_0() { return cTitleKeyword_4_0_0; }

		//title=STRING
		public Assignment getTitleAssignment_4_0_1() { return cTitleAssignment_4_0_1; }

		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_4_0_1_0() { return cTitleSTRINGTerminalRuleCall_4_0_1_0; }

		//size=Size
		public Assignment getSizeAssignment_4_1() { return cSizeAssignment_4_1; }

		//Size
		public RuleCall getSizeSizeParserRuleCall_4_1_0() { return cSizeSizeParserRuleCall_4_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//elements+=UIElement*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//UIElement
		public RuleCall getElementsUIElementParserRuleCall_6_0() { return cElementsUIElementParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class SizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Size");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWidthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWidthINTTerminalRuleCall_2_0 = (RuleCall)cWidthAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cHeightAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cHeightINTTerminalRuleCall_4_0 = (RuleCall)cHeightAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Size:
		//	"size=" "(" width=INT "," height=INT ")";
		public ParserRule getRule() { return rule; }

		//"size=" "(" width=INT "," height=INT ")"
		public Group getGroup() { return cGroup; }

		//"size="
		public Keyword getSizeKeyword_0() { return cSizeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//width=INT
		public Assignment getWidthAssignment_2() { return cWidthAssignment_2; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_2_0() { return cWidthINTTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//height=INT
		public Assignment getHeightAssignment_4() { return cHeightAssignment_4; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_4_0() { return cHeightINTTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class BoundsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bounds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoundsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoundsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXINTTerminalRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYINTTerminalRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cWidthAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWidthINTTerminalRuleCall_7_0 = (RuleCall)cWidthAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cHeightAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cHeightINTTerminalRuleCall_9_0 = (RuleCall)cHeightAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Bounds: //{Bounds} helpful to prevent error when changing referenced object within unassigned rule call 
		//	{Bounds} "bounds=" "(" x=INT "," y=INT "," width=INT "," height=INT ")";
		public ParserRule getRule() { return rule; }

		////{Bounds} helpful to prevent error when changing referenced object within unassigned rule call 
		//{Bounds} "bounds=" "(" x=INT "," y=INT "," width=INT "," height=INT ")"
		public Group getGroup() { return cGroup; }

		////{Bounds} helpful to prevent error when changing referenced object within unassigned rule call 
		//{Bounds}
		public Action getBoundsAction_0() { return cBoundsAction_0; }

		//"bounds="
		public Keyword getBoundsKeyword_1() { return cBoundsKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//x=INT
		public Assignment getXAssignment_3() { return cXAssignment_3; }

		//INT
		public RuleCall getXINTTerminalRuleCall_3_0() { return cXINTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//y=INT
		public Assignment getYAssignment_5() { return cYAssignment_5; }

		//INT
		public RuleCall getYINTTerminalRuleCall_5_0() { return cYINTTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//width=INT
		public Assignment getWidthAssignment_7() { return cWidthAssignment_7; }

		//INT
		public RuleCall getWidthINTTerminalRuleCall_7_0() { return cWidthINTTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//height=INT
		public Assignment getHeightAssignment_9() { return cHeightAssignment_9; }

		//INT
		public RuleCall getHeightINTTerminalRuleCall_9_0() { return cHeightINTTerminalRuleCall_9_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
	}

	public class UIElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UIElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFieldParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cBoundsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBoundsBoundsParserRuleCall_1_0 = (RuleCall)cBoundsAssignment_1.eContents().get(0);
		
		//UIElement:
		//	(Label | Field | Button) bounds=Bounds;
		public ParserRule getRule() { return rule; }

		//(Label | Field | Button) bounds=Bounds
		public Group getGroup() { return cGroup; }

		//Label | Field | Button
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Label
		public RuleCall getLabelParserRuleCall_0_0() { return cLabelParserRuleCall_0_0; }

		//Field
		public RuleCall getFieldParserRuleCall_0_1() { return cFieldParserRuleCall_0_1; }

		//Button
		public RuleCall getButtonParserRuleCall_0_2() { return cButtonParserRuleCall_0_2; }

		//bounds=Bounds
		public Assignment getBoundsAssignment_1() { return cBoundsAssignment_1; }

		//Bounds
		public RuleCall getBoundsBoundsParserRuleCall_1_0() { return cBoundsBoundsParserRuleCall_1_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cTextAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Label:
		//	"Label" name=ID ("(" text=STRING? ")")?;
		public ParserRule getRule() { return rule; }

		//"Label" name=ID ("(" text=STRING? ")")?
		public Group getGroup() { return cGroup; }

		//"Label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" text=STRING? ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//text=STRING?
		public Assignment getTextAssignment_2_1() { return cTextAssignment_2_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_1_0() { return cTextSTRINGTerminalRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPropertyPropertyCrossReference_3_0 = (CrossReference)cPropertyAssignment_3.eContents().get(0);
		private final RuleCall cPropertyPropertyIDTerminalRuleCall_3_0_1 = (RuleCall)cPropertyPropertyCrossReference_3_0.eContents().get(1);
		
		//Field:
		//	"Field" name=ID "for" property=[Property];
		public ParserRule getRule() { return rule; }

		//"Field" name=ID "for" property=[Property]
		public Group getGroup() { return cGroup; }

		//"Field"
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//property=[Property]
		public Assignment getPropertyAssignment_3() { return cPropertyAssignment_3; }

		//[Property]
		public CrossReference getPropertyPropertyCrossReference_3_0() { return cPropertyPropertyCrossReference_3_0; }

		//ID
		public RuleCall getPropertyPropertyIDTerminalRuleCall_3_0_1() { return cPropertyPropertyIDTerminalRuleCall_3_0_1; }
	}

	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindButtonKindEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTextSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTextAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Button:
		//	"Button" name=ID kind=ButtonKind? ("(" text=STRING? ")")?;
		public ParserRule getRule() { return rule; }

		//"Button" name=ID kind=ButtonKind? ("(" text=STRING? ")")?
		public Group getGroup() { return cGroup; }

		//"Button"
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//kind=ButtonKind?
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }

		//ButtonKind
		public RuleCall getKindButtonKindEnumRuleCall_2_0() { return cKindButtonKindEnumRuleCall_2_0; }

		//("(" text=STRING? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//text=STRING?
		public Assignment getTextAssignment_3_1() { return cTextAssignment_3_1; }

		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_3_1_0() { return cTextSTRINGTerminalRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	
	
	public class AttributeTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDateDateKeyword_2_0 = (Keyword)cDateEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AttributeType:
		//	String | Integer | Date;
		public EnumRule getRule() { return rule; }

		//String | Integer | Date
		public Alternatives getAlternatives() { return cAlternatives; }

		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//"String"
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//Integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//"Integer"
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }

		//Date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_2() { return cDateEnumLiteralDeclaration_2; }

		//"Date"
		public Keyword getDateDateKeyword_2_0() { return cDateDateKeyword_2_0; }
	}

	public class MultiplicityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicityKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSingleEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSingle1Keyword_0_0 = (Keyword)cSingleEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMultipleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMultipleLeftSquareBracketAsteriskRightSquareBracketKeyword_1_0 = (Keyword)cMultipleEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MultiplicityKind:
		//	Single="[1]" //default
		//	| Multiple="[*]";
		public EnumRule getRule() { return rule; }

		//Single="[1]" //default
		//| Multiple="[*]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Single="[1]"
		public EnumLiteralDeclaration getSingleEnumLiteralDeclaration_0() { return cSingleEnumLiteralDeclaration_0; }

		//"[1]"
		public Keyword getSingle1Keyword_0_0() { return cSingle1Keyword_0_0; }

		//Multiple="[*]"
		public EnumLiteralDeclaration getMultipleEnumLiteralDeclaration_1() { return cMultipleEnumLiteralDeclaration_1; }

		//"[*]"
		public Keyword getMultipleLeftSquareBracketAsteriskRightSquareBracketKeyword_1_0() { return cMultipleLeftSquareBracketAsteriskRightSquareBracketKeyword_1_0; }
	}

	public class ButtonKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ButtonKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCreateEditEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCreateEditCreateEditKeyword_0_0 = (Keyword)cCreateEditEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDeleteDeleteKeyword_1_0 = (Keyword)cDeleteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCancelEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCancelCancelKeyword_2_0 = (Keyword)cCancelEnumLiteralDeclaration_2.eContents().get(0);
		
		/// * our GUI Model
		//Window:
		//	ListWindow | EntryWindow
		//;
		//
		//ListWindow:
		//	"listwindow" name=QualifiedName "for" entity=[Entity]
		//	"{"
		//		("height" height=INT)
		//		("width" width=INT)
		//		("title" title=STRING)?
		//	"}"
		//;
		//
		//EntryWindow:
		//	"entrywindow" name=QualifiedName "for" entity=[Entity]
		//	"{"
		//		("height" height=INT)
		//		("width" width=INT)
		//		("title" title=STRING)?
		//		(elements+=Element)*
		//	"}"
		//;
		//
		//Element:
		//	(Label | Field | Button) "height" height=INT "width" width=INT "x" x=INT "y" y=INT	
		//;
		//
		//Label:
		//	"label" name=ID ("text" text=STRING)? 
		//;
		//
		//Field:
		//	"field" property=[Property]
		//;
		//
		//enum InscriptionType :
		//	CreateEdit='CreateEdit' | 
		//	Delete='Delete' |
		//	Cancel='Cancel'
		//;
		//
		//Button:
		//	"button" type=InscriptionType
		//;
		// * * / enum ButtonKind:
		//	createEdit // default
		//	| delete | cancel;
		public EnumRule getRule() { return rule; }

		//createEdit // default
		//| delete | cancel
		public Alternatives getAlternatives() { return cAlternatives; }

		//createEdit
		public EnumLiteralDeclaration getCreateEditEnumLiteralDeclaration_0() { return cCreateEditEnumLiteralDeclaration_0; }

		//"createEdit"
		public Keyword getCreateEditCreateEditKeyword_0_0() { return cCreateEditCreateEditKeyword_0_0; }

		//delete
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_1() { return cDeleteEnumLiteralDeclaration_1; }

		//"delete"
		public Keyword getDeleteDeleteKeyword_1_0() { return cDeleteDeleteKeyword_1_0; }

		//cancel
		public EnumLiteralDeclaration getCancelEnumLiteralDeclaration_2() { return cCancelEnumLiteralDeclaration_2; }

		//"cancel"
		public Keyword getCancelCancelKeyword_2_0() { return cCancelCancelKeyword_2_0; }
	}
	
	private ModelElements pModel;
	private QualifiedNameElements pQualifiedName;
	private EntityElements pEntity;
	private PropertyElements pProperty;
	private AttributeElements pAttribute;
	private AttributeTypeElements unknownRuleAttributeType;
	private ReferenceElements pReference;
	private MultiplicityKindElements unknownRuleMultiplicityKind;
	private WindowElements pWindow;
	private ListWindowElements pListWindow;
	private EntryWindowElements pEntryWindow;
	private SizeElements pSize;
	private BoundsElements pBounds;
	private UIElementElements pUIElement;
	private LabelElements pLabel;
	private FieldElements pField;
	private ButtonElements pButton;
	private ButtonKindElements unknownRuleButtonKind;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDsl01GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl01".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Task 1
	//Model:
	//	entities+=Entity* windows+=Window*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	////	
	////Entity:
	////	"entity" name=QualifiedName ("extends" superEntity=[Entity])? (abstract="abstract")?
	////	"{"
	////	(properties+=Property)*
	////	"}"
	////;
	////
	////Property:
	////	Attribute | Reference
	////;
	////
	////enum AttributeType :
	////	String='String' |
	////	Integer='Integer' |
	////	Date='Date'
	////;
	////
	////Attribute:
	////	"att" name=ID type=AttributeType (optional="optional")?
	////;
	////
	////enum Cardinality :
	////	One='1' |
	////	Multi='*'
	////;
	////
	////Reference:
	////	"ref" name=ID entity=[Entity] (cardinality=Cardinality)?
	////;
	//// =============================================
	/// * Entity Model * / // =============================================
	//Entity:
	//	abstract?="abstract"? "entity" name=ID ("extends" superType=[Entity])? "{" properties+=Property* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Property:
	//	Attribute | Reference;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Attribute:
	//	"att" name=ID ":" type=AttributeType optional?="optional"?;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//enum AttributeType:
	//	String | Integer | Date;
	public AttributeTypeElements getAttributeTypeAccess() {
		return (unknownRuleAttributeType != null) ? unknownRuleAttributeType : (unknownRuleAttributeType = new AttributeTypeElements());
	}
	
	public EnumRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}

	//Reference:
	//	"ref" name=ID ":" type=[Entity] multiplicity=MultiplicityKind? ("opposite=" opposite=[Reference]);
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//enum MultiplicityKind:
	//	Single="[1]" //default
	//	| Multiple="[*]";
	public MultiplicityKindElements getMultiplicityKindAccess() {
		return (unknownRuleMultiplicityKind != null) ? unknownRuleMultiplicityKind : (unknownRuleMultiplicityKind = new MultiplicityKindElements());
	}
	
	public EnumRule getMultiplicityKindRule() {
		return getMultiplicityKindAccess().getRule();
	}

	//// =============================================
	/// * GUI Model * / // =============================================
	//Window:
	//	EntryWindow | ListWindow;
	public WindowElements getWindowAccess() {
		return (pWindow != null) ? pWindow : (pWindow = new WindowElements());
	}
	
	public ParserRule getWindowRule() {
		return getWindowAccess().getRule();
	}

	//ListWindow:
	//	"ListWindow" name=ID "for" entity=[Entity] ("title" title=STRING)? size=Size;
	public ListWindowElements getListWindowAccess() {
		return (pListWindow != null) ? pListWindow : (pListWindow = new ListWindowElements());
	}
	
	public ParserRule getListWindowRule() {
		return getListWindowAccess().getRule();
	}

	//EntryWindow:
	//	"EntryWindow" name=ID "for" entity=[Entity] (("title" title=STRING)? & size=Size) "{" elements+=UIElement* "}";
	public EntryWindowElements getEntryWindowAccess() {
		return (pEntryWindow != null) ? pEntryWindow : (pEntryWindow = new EntryWindowElements());
	}
	
	public ParserRule getEntryWindowRule() {
		return getEntryWindowAccess().getRule();
	}

	//Size:
	//	"size=" "(" width=INT "," height=INT ")";
	public SizeElements getSizeAccess() {
		return (pSize != null) ? pSize : (pSize = new SizeElements());
	}
	
	public ParserRule getSizeRule() {
		return getSizeAccess().getRule();
	}

	//Bounds: //{Bounds} helpful to prevent error when changing referenced object within unassigned rule call 
	//	{Bounds} "bounds=" "(" x=INT "," y=INT "," width=INT "," height=INT ")";
	public BoundsElements getBoundsAccess() {
		return (pBounds != null) ? pBounds : (pBounds = new BoundsElements());
	}
	
	public ParserRule getBoundsRule() {
		return getBoundsAccess().getRule();
	}

	//UIElement:
	//	(Label | Field | Button) bounds=Bounds;
	public UIElementElements getUIElementAccess() {
		return (pUIElement != null) ? pUIElement : (pUIElement = new UIElementElements());
	}
	
	public ParserRule getUIElementRule() {
		return getUIElementAccess().getRule();
	}

	//Label:
	//	"Label" name=ID ("(" text=STRING? ")")?;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Field:
	//	"Field" name=ID "for" property=[Property];
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Button:
	//	"Button" name=ID kind=ButtonKind? ("(" text=STRING? ")")?;
	public ButtonElements getButtonAccess() {
		return (pButton != null) ? pButton : (pButton = new ButtonElements());
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}

	/// * our GUI Model
	//Window:
	//	ListWindow | EntryWindow
	//;
	//
	//ListWindow:
	//	"listwindow" name=QualifiedName "for" entity=[Entity]
	//	"{"
	//		("height" height=INT)
	//		("width" width=INT)
	//		("title" title=STRING)?
	//	"}"
	//;
	//
	//EntryWindow:
	//	"entrywindow" name=QualifiedName "for" entity=[Entity]
	//	"{"
	//		("height" height=INT)
	//		("width" width=INT)
	//		("title" title=STRING)?
	//		(elements+=Element)*
	//	"}"
	//;
	//
	//Element:
	//	(Label | Field | Button) "height" height=INT "width" width=INT "x" x=INT "y" y=INT	
	//;
	//
	//Label:
	//	"label" name=ID ("text" text=STRING)? 
	//;
	//
	//Field:
	//	"field" property=[Property]
	//;
	//
	//enum InscriptionType :
	//	CreateEdit='CreateEdit' | 
	//	Delete='Delete' |
	//	Cancel='Cancel'
	//;
	//
	//Button:
	//	"button" type=InscriptionType
	//;
	// * * / enum ButtonKind:
	//	createEdit // default
	//	| delete | cancel;
	public ButtonKindElements getButtonKindAccess() {
		return (unknownRuleButtonKind != null) ? unknownRuleButtonKind : (unknownRuleButtonKind = new ButtonKindElements());
	}
	
	public EnumRule getButtonKindRule() {
		return getButtonKindAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
